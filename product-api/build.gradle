import com.github.spotbugs.snom.Confidence
import com.github.spotbugs.snom.Effort
import com.github.spotbugs.snom.SpotBugsTask
import com.kageiit.jacobo.JacoboTask

plugins {
	id 'java'
	id 'idea'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'

	id 'jacoco'
	id 'com.kageiit.jacobo' version '2.1.0'
	id 'org.barfuin.gradle.jacocolog' version '3.1.0'
	id "com.github.ben-manes.versions" version '0.51.0'

	id 'com.diffplug.spotless' version '6.25.0'
	id 'checkstyle'
	id 'pmd'
	id 'org.sonarqube' version '5.1.0.4882'

	id 'com.github.spotbugs' version '6.0.20'
	id 'org.owasp.dependencycheck' version '10.0.3'
	id 'org.cyclonedx.bom' version '1.9.0'

	id 'project-report'
	id 'org.springdoc.openapi-gradle-plugin' version '1.9.0'
	id 'com.github.johnrengelman.processes' version '0.5.0'
}

group = 'br.com.github.kalilventura'
version = '1.0.0'
description = ''

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

springBoot {
	buildInfo {
		properties {
			group = project.group
			artifact = 'product-api'
			version = project.version
		}
	}
}

repositories {
	mavenCentral()
}

ext {
	springCloudVersion = '2023.0.2'
	springBootVersion = '3.3.2'
	lombokVersion = '1.18.34'
	liquibaseVersion = '4.29.1'
	wiremockVersion = '3.9.1'
	mockitoVersion = '5.12.0'
	guavaVersion = '33.3.0-jre'
	annotationsVersion = '24.1.0'
	testcontainersVersion = '1.20.1'
	postgresVersion = '42.7.3'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

dependencies {
	// Spring Boot Starters
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// Liquibase
	implementation "org.liquibase:liquibase-core:${liquibaseVersion}"

	// Lombok
	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
	testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

	// PostgresSQL
	runtimeOnly "org.postgresql:postgresql:${postgresVersion}"

	// Guava
	implementation "com.google.guava:guava:${guavaVersion}"

	// JetBrains Annotations
	implementation "org.jetbrains:annotations:${annotationsVersion}"

	// Test Dependencies
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.jupiter', module: 'junit-jupiter'
		exclude group: 'org.junit.jupiter', module: 'junit-jupiter-engine'
		exclude group: 'org.mockito', module: 'mockito-core'
		exclude group: 'org.mockito', module: 'mockito-junit-jupiter'
	}
	testImplementation "org.wiremock:wiremock:${wiremockVersion}"
	testImplementation "org.mockito:mockito-core:${mockitoVersion}"
	testImplementation 'org.springframework.amqp:spring-rabbit-test'
	testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
	testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
	testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"

	pmd 'net.sourceforge.pmd:pmd-ant:7.4.0'
	pmd 'net.sourceforge.pmd:pmd-java:7.4.0'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

tasks.withType(JavaCompile).configureEach {
	configure(options) {
		options.compilerArgs << '-parameters'
	}
}

def appResourceDir = "${projectDir}/src/main/resources/app"
def jacocoVersion = '0.8.12'
def googleJavaFormatVersion = '1.23.0'
def checkstyleVersion = '10.17.0'
def pmdVersion = '7.4.0'
def spotbugsVersion = '4.8.6'

def jacocoXmlReportPath = "${buildDir}/reports/jacoco/test"

//tasks.named('test') {
//    useJUnitPlatform()
//}

test {
	useJUnitPlatform()
	systemProperty 'junit.jupiter.execution.parallel.enabled', true
	systemProperty 'junit.jupiter.execution.parallel.mode.default', 'same_thread'
	systemProperty 'junit.jupiter.execution.parallel.mode.classes.default', 'concurrent'
	systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'

	testLogging {
		events 'skipped', 'failed'
		exceptionFormat 'full'
	}
	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = jacocoVersion
}

jacocoTestReport {
	reports {
		xml.required = true
		csv.required = false
		html.required = true
	}
	finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
	violationRules {
		failOnViolation = false
		rule {
			element = 'BUNDLE'

			limit {
				counter = 'CLASS'
				value = 'MISSEDCOUNT'
				maximum = 19
			}

			limit {
				counter = 'METHOD'
				value = 'COVEREDRATIO'
				minimum = 0.87
			}

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.60
			}

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.85
			}

			limit {
				counter = 'INSTRUCTION'
				value = 'COVEREDRATIO'
				minimum = 0.85
			}

			limit {
				counter = 'COMPLEXITY'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}
		}
	}
}

tasks.register('jacobo', JacoboTask, {
	it.jacocoReport = file("${jacocoXmlReportPath}/jacocoTestReport.xml")
	it.coberturaReport = file("${buildDir}/reports/cobertura.xml")
	it.srcDirs = sourceSets.main.java.srcDirs
})

spotless {
	encoding 'UTF-8'
	enforceCheck false

	format 'misc', {
		target '*.md', '.gitignore'
		trimTrailingWhitespace()
		indentWithTabs()
		endWithNewline()
	}
	java {
		googleJavaFormat(googleJavaFormatVersion)
	}
	groovyGradle {
		target '*.gradle'
		greclipse()
	}
}

checkstyle {
	toolVersion checkstyleVersion
	ignoreFailures false
	showViolations true
	maxWarnings 0
	configFile file("${appResourceDir}/quality/checkstyle-google-ruleset.xml")
}

tasks.register('checkstyle') {
	dependsOn 'checkstyleMain'
	dependsOn 'checkstyleTest'
}

pmd {
	consoleOutput = true
	toolVersion = pmdVersion
	ruleSets = [
		"${appResourceDir}/quality/pmd-custom-ruleset.xml"
	]
}

tasks.register('pmd') {
	dependsOn 'pmdMain'
	dependsOn 'pmdTest'
}

sonar {
	properties {
		property 'sonar.projectName', 'Product'
		property 'sonar.projectKey', 'product'
		property 'sonar.qualitygate.wait', true
		property 'sonar.coverage.jacoco.xmlReportPaths', "${jacocoXmlReportPath}/*.xml"
		property('sonar.java.binaries', 'build/classes/java')
	}
}

spotbugs {
	toolVersion = spotbugsVersion
	effort = Effort.valueOf('MAX')
	reportLevel = Confidence.valueOf('LOW')
	ignoreFailures = false
	showStackTraces = true
	showProgress = true

	excludeFilter = file("${appResourceDir}/security/spotbugs-security-exclude.xml")
}

spotbugsMain {
	reports {
		xml.required = true
	}
}

spotbugsTest {
	reports {
		xml.required = true
	}
}

//tasks.withType(SpotBugsTask) {
//    tasks.register("${spotbugs.name}/View", SpotBugsView) {
//        description = "Opens the Spotbugs UI for ${spotbugs.name}"
//        spotBugsClasspath.from(spotbugs.spotbugsClasspath)
//        reportsPath = spotbugs.reportsDir
//    }
//}

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21

	withJavadocJar()
	withSourcesJar()
}

jar {
    manifest {
        attributes(
            'Implementation-Title': project.name,
            'Implementation-Version': project.version
        )
    }
}